steps:
  # starts a process that allows the vscode test environment to run
  - script: |
      set -e
      /usr/bin/Xvfb :10 -ac >> /tmp/Xvfb.out 2>&1 &
      disown -ar
    displayName: 'Start xvfb'
    condition: eq(variables['Agent.OS'], 'Linux')

  - task: Npm@1
    displayName: 'Run tests via npm script'
    inputs:
      command: custom
      verbose: false
      customCommand: 'run test-coverage'
    env:
      DISPLAY: :10

  - task: PublishTestResults@2
    displayName: 'Publish Test Results'
    inputs:
      testResultsFiles: 'out-cov/*-results.xml'
      testRunTitle: '$(Agent.OS)-$(node_version)'
    condition: succeededOrFailed()

  - task: PublishCodeCoverageResults@1
    inputs:
      codeCoverageTool: 'cobertura'
      summaryFileLocation: coverage/cobertura-coverage.xml
      reportDirectory: coverage/lcov-report
    condition: succeededOrFailed()

  - script: |
      bash <(curl https://codecov.io/bash) -t $(CODECOV_TOKEN) -f coverage/cobertura-coverage.xml
    displayName: 'codecov'
    condition: succeededOrFailed()

  - task: CopyFiles@2
    inputs:
      sourceFolder: '$(Build.SourcesDirectory)/coverage'
      targetFolder: $(Build.ArtifactStagingDirectory)
    displayName: 'Copy coverage output'

  - task: PublishPipelineArtifact@0
    displayName: 'Publish Coverage Artifact'
    inputs:
      targetPath: $(Build.ArtifactStagingDirectory)
      artifactName: 'coverage-$(Agent.OS)-$(node_version)'